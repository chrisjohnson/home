#!/usr/bin/env bash
#!/usr/bin/env bash
# -----------------------------------------------------------------------------
# bat-extras | Copyright (C) 2019 eth-p | MIT License
#
# Repository: https://github.com/eth-p/bat-extras
# Issues:     https://github.com/eth-p/bat-extras/issues
# -----------------------------------------------------------------------------
BAT=bat
DOCS_URL=https://github.com/eth-p/bat-extras/blob/master/doc
# --- BEGIN LIBRARY FILE: opt.sh ---
#!/usr/bin/env bash
# -----------------------------------------------------------------------------
# bat-extras | Copyright (C) 2019 eth-p | MIT License
#
# Repository: https://github.com/eth-p/bat-extras
# Issues:     https://github.com/eth-p/bat-extras/issues
# -----------------------------------------------------------------------------
PROGRAM="$(basename "$0" .sh)"
SHIFTOPT_HOOKS=()

# Sets the internal _ARGV, _ARGV_INDEX, and _ARGV_LAST variables used when
# parsing options with the shiftopt and shiftval functions.
setargs() {
	_ARGV=("$@") 
	_ARGV_LAST="$((${#_ARGV[@]} - 1))"
	_ARGV_INDEX=0
}

# Gets the next option passed to the script.
# 
# Variables:
#     OPT  -- The option name.
#
# Returns:
#     0  -- An option was read.
#     1  -- No more options were read.
#
# Example:
#     while shiftopt; do
#         shiftval
#         echo "$OPT = $OPT_VAL"
#     done
shiftopt() {
	# Read the top of _ARGV.
	[[ "$_ARGV_INDEX" -gt "$_ARGV_LAST" ]] && return 1
	OPT="${_ARGV[$_ARGV_INDEX]}"
	unset OPT_VAL
	
	if [[ "$OPT" =~ ^--[a-zA-Z0-9_-]+=.* ]]; then
		OPT_VAL="${OPT#*=}"
		OPT="${OPT%%=*}"
	fi

	# Pop array.
	((_ARGV_INDEX++))

	# Handle hooks.
	local hook
	for hook in "${SHIFTOPT_HOOKS[@]}"; do
		if "$hook"; then
			shiftopt
			return $?
		fi
	done

	# Return.
	return 0
}

# Gets the value for the current option.
#
# Variables:
#     OPT_VAL  -- The option value.
#
# Returns:
#     0       -- An option value was read.
#     EXIT 1  -- No option value was available.
shiftval() {
	# Skip if a value was already provided.
	if [[ -n "${OPT_VAL+x}" ]]; then
		return 0
	fi

	OPT_VAL="${_ARGV[$_ARGV_INDEX]}"
	((_ARGV_INDEX++))

	# Error if no value is provided.
	if [[ "$OPT_VAL" =~ -.* ]]; then
		printc "%{RED}%s: '%s' requires a value%{CLEAR}\n" "$PROGRAM" "$ARG"
		exit 1
	fi
}


# -----------------------------------------------------------------------------
setargs "$@"

# --- END LIBRARY FILE ---
# --- BEGIN LIBRARY FILE: opt_hooks.sh ---
#!/usr/bin/env bash
# -----------------------------------------------------------------------------
# bat-extras | Copyright (C) 2019 eth-p | MIT License
#
# Repository: https://github.com/eth-p/bat-extras
# Issues:     https://github.com/eth-p/bat-extras/issues
# -----------------------------------------------------------------------------


# -----------------------------------------------------------------------------
# Hooks:
# -----------------------------------------------------------------------------

# Option parser hook: color support.
# This will accept --no-color, or --color.
# It will also try to accept --color=never|always|auto.
#
# The variable OPT_COLOR will be set depending on whether or not a TTY is
# detected and whether or not --color/--no-color is specified.
hook_color() {
	SHIFTOPT_HOOKS+=("__shiftopt_hook__color")
	__shiftopt_hook__color() {
		case "$OPT" in
			--no-color) OPT_COLOR=false; printc_init "$OPT_COLOR";;
			--color)    {
				case "$OPT_VAL" in
					auto)        :;;
					always|true) OPT_COLOR=true;  printc_init "$OPT_COLOR";;
					never|false) OPT_COLOR=false; printc_init "$OPT_COLOR";;
				esac
			};;

			*) return 1;;
		esac
	}

	# Default color support.
	if [[ -z "$OPT_COLOR" ]]; then
		if [[ -t 1 ]]; then
			OPT_COLOR=true
		else
			OPT_COLOR=false
		fi
		printc_init "$OPT_COLOR"
	fi
}

# Option parser hook: pager support.
# This will accept --pager='pager', --no-pager
hook_pager() {
	SHIFTOPT_HOOKS+=("__shiftopt_hook__pager")
	__shiftopt_hook__pager() {
		case "$OPT" in
	    	# Specify paging.
			--no-pager)   shiftval; SCRIPT_PAGER_CMD='';;
			--paging)     shiftval; {
				case "$OPT_VAL" in
					auto)   :;;
					never)  SCRIPT_PAGER_CMD='';;
					always) :;;
				esac
			};;

			# Specify the pager.
			--pager) {
				shiftval;
				SCRIPT_PAGER_CMD=($OPT_VAL);
				PAGER_ARGS=()
			};;

			*) return 1;;
		esac
	}
}

# --- END LIBRARY FILE ---
# --- BEGIN LIBRARY FILE: print.sh ---
#!/usr/bin/env bash
# -----------------------------------------------------------------------------
# bat-extras | Copyright (C) 2019 eth-p | MIT License
#
# Repository: https://github.com/eth-p/bat-extras
# Issues:     https://github.com/eth-p/bat-extras/issues
# -----------------------------------------------------------------------------

# Printf, but with optional colors.
# This uses the same syntax and arguments as printf.
#
# Example:
#     printc "%{RED}This is red %s.%{CLEAR}\n" "text"
#
printc() {
	printf "$(sed "$_PRINTC_PATTERN" <<< "$1")" "${@:2}"
}

# Initializes the color tags for printc.
#
# Arguments:
#     true  -- Turns on color output.
#     false -- Turns off color output.
printc_init() {
	case "$1" in
		true) _PRINTC_PATTERN="$_PRINTC_PATTERN_ANSI";;
		false) _PRINTC_PATTERN="$_PRINTC_PATTERN_PLAIN";;

		"") {
			_PRINTC_PATTERN_ANSI=""
			_PRINTC_PATTERN_PLAIN=""

			local name
			local ansi
			while read -r name ansi; do
				if [[ -z "${name}" && -z "${ansi}" ]] || [[ "${name:0:1}" = "#" ]]; then
					continue
				fi

				ansi="$(sed 's/\\/\\\\/' <<< "$ansi")"

				_PRINTC_PATTERN_PLAIN="${_PRINTC_PATTERN_PLAIN}s/%{${name}}//g;"
				_PRINTC_PATTERN_ANSI="${_PRINTC_PATTERN_ANSI}s/%{${name}}/${ansi}/g;"
			done

			if [ -t 1 ]; then
				_PRINTC_PATTERN="$_PRINTC_PATTERN_ANSI"
			else
				_PRINTC_PATTERN="$_PRINTC_PATTERN_PLAIN"
			fi
		};;
	esac
}

# Print a warning message to STDERR.
# Arguments:
#     1   -- The printc formatting string.
#     ... -- The printc formatting arguments.
print_warning() {
	printc "%{YELLOW}[%s warning]%{CLEAR}: $1%{CLEAR}\n" "$PROGRAM" "${@:2}" 1>&2
}

# Print an error message to STDERR.
# Arguments:
#     1   -- The printc formatting string.
#     ... -- The printc formatting arguments.
print_error() {
	printc "%{RED}[%s error]%{CLEAR}: $1%{CLEAR}\n" "$PROGRAM" "${@:2}" 1>&2
}

# -----------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------
printc_init <<END
	CLEAR	\x1B[0m
	RED		\x1B[31m
	GREEN	\x1B[32m
	YELLOW	\x1B[33m
	BLUE	\x1B[34m
	MAGENTA	\x1B[35m
	CYAN	\x1B[36m

	DIM		\x1B[2m
END

# --- END LIBRARY FILE ---
# --- BEGIN LIBRARY FILE: pager.sh ---
#!/usr/bin/env bash
# -----------------------------------------------------------------------------
# bat-extras | Copyright (C) 2019 eth-p | MIT License
#
# Repository: https://github.com/eth-p/bat-extras
# Issues:     https://github.com/eth-p/bat-extras/issues
# -----------------------------------------------------------------------------

# Defaults.
SCRIPT_PAGER_CMD=("$PAGER")
SCRIPT_PAGER_ARGS=()

# Add arguments for the less pager.
if [[ "$(basename "${SCRIPT_PAGER_CMD[0]}")" = "less" ]]; then
	SCRIPT_PAGER_ARGS=(-R)
fi

# Prefer the bat pager.
if [[ -n "${BAT_PAGER+x}" ]]; then
	SCRIPT_PAGER_CMD=($BAT_PAGER)
	SCRIPT_PAGER_ARGS=()
fi

# Prefer no pager if not a tty.
if ! [[ -t 1 ]]; then
	SCRIPT_PAGER_CMD=()
	SCRIPT_PAGER_ARGS=()
fi

# -----------------------------------------------------------------------------

# Executes a command or function, and pipes its output to the pager (if exists).
#
# Returns: The exit code of the command.
# Example:
#     pager_exec echo hi
pager_exec() {
	if [[ -n "$1" ]]; then
		if [[ -n "$SCRIPT_PAGER_CMD" ]]; then
			"$@" | "${SCRIPT_PAGER_CMD[@]}" "${SCRIPT_PAGER_ARGS[@]}"
			return $?
		else
			"$@"
			return $?
		fi
	fi
}

# Displays the output of a command or function inside the pager (if exists).
#
# Example:
#     bat | pager_display
pager_display() {
	if [[ -n "$SCRIPT_PAGER_CMD" ]]; then
		"${SCRIPT_PAGER_CMD[@]}" "${SCRIPT_PAGER_ARGS[@]}"
	else
		cat
	fi
}

# --- END LIBRARY FILE ---
# -----------------------------------------------------------------------------
# Init:
# -----------------------------------------------------------------------------
hook_color
hook_pager
# -----------------------------------------------------------------------------
# Watchers:
# -----------------------------------------------------------------------------

WATCHERS=("entr" "poll")

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

watcher_entr_watch() {
	ENTR_ARGS=()

	if [[ "$OPT_CLEAR" = "true" ]]; then
		ENTR_ARGS+=('-c')
	fi

	entr "${ENTR_ARGS[@]}" \
		"$BAT" "${BAT_ARGS[@]}" \
		--terminal-width="$TERM_WIDTH" \
		--paging=never \
		"$@" \
		< <(printf "%s\n" "$@")
}

watcher_entr_supported() {
	command -v entr &>/dev/null
	return $?
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

POLL_STAT_VARIANT=''
POLL_STAT_COMMAND=()

determine_stat_variant() {
	if [[ -n "$POLL_STAT_VARIANT" ]]; then
		return 0
	fi

	# Try GNU stat.
	if stat -c '%z' "$0" &>/dev/null; then
		POLL_STAT_COMMAND=(stat -c '%z')
		POLL_STAT_VARIANT='gnu'
		return 0
	fi

	# Try BSD stat.
	if stat -f '%m' "$0" &>/dev/null; then
		POLL_STAT_COMMAND=(stat -f '%m')
		POLL_STAT_VARIANT='bsd'
		return 0
	fi

	return 1
}

watcher_poll_watch() {
	determine_stat_variant

	local files=("$@")
	local times=()

	# Get the initial modified times.
	local file
	local time
	local modified=true
	for file in "${files[@]}"; do
		time="$("${POLL_STAT_COMMAND[@]}" "$file")"
		times+=("$time")
	done

	# Display files.
	while true; do
		if "$modified"; then
			modified=false

			if [[ "$OPT_CLEAR" = "true" ]]; then
				clear
			fi
	
			"$BAT" "${BAT_ARGS[@]}" \
				--terminal-width="$TERM_WIDTH" \
				--paging=never \
				"${files[@]}"
		fi

		local i=0
		for file in "${files[@]}"; do
			time="$("${POLL_STAT_COMMAND[@]}" "$file")"
			
			if [[ "$time" -ne "${times[$i]}" ]]; then
				times[$i]="$time"
				modified=true
			fi

			((i++))
		done

		sleep 1
	done

	"${POLL_STAT_COMMAND[@]}" "$@"
	local ts
}

watcher_poll_supported() {
	determine_stat_variant
	return $?
}

# -----------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------

determine_watcher() {
	local watcher
	for watcher in "${WATCHERS[@]}"; do
		if "watcher_${watcher}_supported"; then
			echo "$watcher"
			return 0
		fi
	done
	
	return 1
}

# -----------------------------------------------------------------------------
# Options:
# -----------------------------------------------------------------------------
BAT_ARGS=()
FILES=()
FILES_HAS_DIRECTORY=false
OPT_CLEAR=true
OPT_WATCHER=""
TERM_WIDTH="$(tput cols)"

# Set options based on tty.
if [[ -t 1 ]]; then
	OPT_COLOR=true
fi

# Parse arguments.
while shiftopt; do
	case "$OPT" in

		# Script Options
		--watcher)        shiftval; OPT_WATCHER="$OPT_VAL";;
		--clear)                    OPT_CLEAR=true;;
		--no-clear)                 OPT_CLEAR=false;;
		--terminal-width) shiftval; TERM_WIDTH="$OPT_VAL";;

		# Bat/Pager Options
		-*) BAT_ARGS+=("$OPT=$OPT_VAL");;
		
		# Files
		*) {
			FILES+=("$OPT")
		};;		

	esac
done

if [[ -z "$FILES" ]]; then
    print_error "no files provided"
    exit 1
fi

for file in "${FILES[@]}"; do
	if ! [[ -e "$file" ]]; then
		print_error "'%s' does not exist" "$file"
		exit 1
	fi

	if [[ -d "$file" ]]; then
		FILES_HAS_DIRECTORY=true
	fi
done

# Append bat arguments.
if "$OPT_COLOR"; then
	BAT_ARGS+=("--color=always")
else
	BAT_ARGS+=("--color=never")
fi

# -----------------------------------------------------------------------------
# Main:
# -----------------------------------------------------------------------------
# Determine the watcher.
if [[ -z "$OPT_WATCHER" ]]; then
	OPT_WATCHER="$(determine_watcher)"
	if [[ $? -ne 0 ]]; then
		print_error "Your system does not have any supported watchers."
		printc "Please read the documentation at %{BLUE}%s%{CLEAR} for more details.\n" "$DOCS_URL/batwatch.md" 1>&2
		exit 2
	fi
else
	if ! type "watcher_${OPT_WATCHER}_supported" &>/dev/null; then
		print_error "Unknown watcher: '%s'" "$OPT_WATCHER"
		exit 1
	fi

	if ! "watcher_${OPT_WATCHER}_supported" &>/dev/null; then
		print_error "Unsupported watcher: '%s'" "$OPT_WATCHER"
		exit 1
	fi
fi

# Run the main function.
main() {
	"watcher_${OPT_WATCHER}_watch" "${FILES[@]}"
	return $?
}

pager_exec main
exit $?

