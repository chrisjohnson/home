#!/usr/bin/env bash
#!/usr/bin/env bash
# -----------------------------------------------------------------------------
# bat-extras | Copyright (C) 2019 eth-p | MIT License
#
# Repository: https://github.com/eth-p/bat-extras
# Issues:     https://github.com/eth-p/bat-extras/issues
# -----------------------------------------------------------------------------
BAT=bat
# --- BEGIN LIBRARY FILE: print.sh ---
#!/usr/bin/env bash
# -----------------------------------------------------------------------------
# bat-extras | Copyright (C) 2019 eth-p | MIT License
#
# Repository: https://github.com/eth-p/bat-extras
# Issues:     https://github.com/eth-p/bat-extras/issues
# -----------------------------------------------------------------------------

# Printf, but with optional colors.
# This uses the same syntax and arguments as printf.
#
# Example:
#     printc "%{RED}This is red %s.%{CLEAR}\n" "text"
#
printc() {
	printf "$(sed "$_PRINTC_PATTERN" <<< "$1")" "${@:2}"
}

# Initializes the color tags for printc.
#
# Arguments:
#     true  -- Turns on color output.
#     false -- Turns off color output.
printc_init() {
	case "$1" in
		true) _PRINTC_PATTERN="$_PRINTC_PATTERN_ANSI";;
		false) _PRINTC_PATTERN="$_PRINTC_PATTERN_PLAIN";;

		"") {
			_PRINTC_PATTERN_ANSI=""
			_PRINTC_PATTERN_PLAIN=""

			local name
			local ansi
			while read -r name ansi; do
				if [[ -z "${name}" && -z "${ansi}" ]] || [[ "${name:0:1}" = "#" ]]; then
					continue
				fi

				ansi="$(sed 's/\\/\\\\/' <<< "$ansi")"

				_PRINTC_PATTERN_PLAIN="${_PRINTC_PATTERN_PLAIN}s/%{${name}}//g;"
				_PRINTC_PATTERN_ANSI="${_PRINTC_PATTERN_ANSI}s/%{${name}}/${ansi}/g;"
			done

			if [ -t 1 ]; then
				_PRINTC_PATTERN="$_PRINTC_PATTERN_ANSI"
			else
				_PRINTC_PATTERN="$_PRINTC_PATTERN_PLAIN"
			fi
		};;
	esac
}

# Print a warning message to STDERR.
# Arguments:
#     1   -- The printc formatting string.
#     ... -- The printc formatting arguments.
print_warning() {
	printc "%{YELLOW}[%s warning]%{CLEAR}: $1%{CLEAR}\n" "$PROGRAM" "${@:2}" 1>&2
}

# Print an error message to STDERR.
# Arguments:
#     1   -- The printc formatting string.
#     ... -- The printc formatting arguments.
print_error() {
	printc "%{RED}[%s error]%{CLEAR}: $1%{CLEAR}\n" "$PROGRAM" "${@:2}" 1>&2
}

# -----------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------
printc_init <<END
	CLEAR	\x1B[0m
	RED		\x1B[31m
	GREEN	\x1B[32m
	YELLOW	\x1B[33m
	BLUE	\x1B[34m
	MAGENTA	\x1B[35m
	CYAN	\x1B[36m

	DIM		\x1B[2m
END

# --- END LIBRARY FILE ---
# --- BEGIN LIBRARY FILE: pager.sh ---
#!/usr/bin/env bash
# -----------------------------------------------------------------------------
# bat-extras | Copyright (C) 2019 eth-p | MIT License
#
# Repository: https://github.com/eth-p/bat-extras
# Issues:     https://github.com/eth-p/bat-extras/issues
# -----------------------------------------------------------------------------

# Defaults.
SCRIPT_PAGER_CMD=("$PAGER")
SCRIPT_PAGER_ARGS=()

# Add arguments for the less pager.
if [[ "$(basename "${SCRIPT_PAGER_CMD[0]}")" = "less" ]]; then
	SCRIPT_PAGER_ARGS=(-R)
fi

# Prefer the bat pager.
if [[ -n "${BAT_PAGER+x}" ]]; then
	SCRIPT_PAGER_CMD=($BAT_PAGER)
	SCRIPT_PAGER_ARGS=()
fi

# Prefer no pager if not a tty.
if ! [[ -t 1 ]]; then
	SCRIPT_PAGER_CMD=()
	SCRIPT_PAGER_ARGS=()
fi

# -----------------------------------------------------------------------------

# Executes a command or function, and pipes its output to the pager (if exists).
#
# Returns: The exit code of the command.
# Example:
#     pager_exec echo hi
pager_exec() {
	if [[ -n "$1" ]]; then
		if [[ -n "$SCRIPT_PAGER_CMD" ]]; then
			"$@" | "${SCRIPT_PAGER_CMD[@]}" "${SCRIPT_PAGER_ARGS[@]}"
			return $?
		else
			"$@"
			return $?
		fi
	fi
}

# Displays the output of a command or function inside the pager (if exists).
#
# Example:
#     bat | pager_display
pager_display() {
	if [[ -n "$SCRIPT_PAGER_CMD" ]]; then
		"${SCRIPT_PAGER_CMD[@]}" "${SCRIPT_PAGER_ARGS[@]}"
	else
		cat
	fi
}

# --- END LIBRARY FILE ---
# --- BEGIN LIBRARY FILE: opt.sh ---
#!/usr/bin/env bash
# -----------------------------------------------------------------------------
# bat-extras | Copyright (C) 2019 eth-p | MIT License
#
# Repository: https://github.com/eth-p/bat-extras
# Issues:     https://github.com/eth-p/bat-extras/issues
# -----------------------------------------------------------------------------
PROGRAM="$(basename "$0" .sh)"
SHIFTOPT_HOOKS=()

# Sets the internal _ARGV, _ARGV_INDEX, and _ARGV_LAST variables used when
# parsing options with the shiftopt and shiftval functions.
setargs() {
	_ARGV=("$@") 
	_ARGV_LAST="$((${#_ARGV[@]} - 1))"
	_ARGV_INDEX=0
}

# Gets the next option passed to the script.
# 
# Variables:
#     OPT  -- The option name.
#
# Returns:
#     0  -- An option was read.
#     1  -- No more options were read.
#
# Example:
#     while shiftopt; do
#         shiftval
#         echo "$OPT = $OPT_VAL"
#     done
shiftopt() {
	# Read the top of _ARGV.
	[[ "$_ARGV_INDEX" -gt "$_ARGV_LAST" ]] && return 1
	OPT="${_ARGV[$_ARGV_INDEX]}"
	unset OPT_VAL
	
	if [[ "$OPT" =~ ^--[a-zA-Z0-9_-]+=.* ]]; then
		OPT_VAL="${OPT#*=}"
		OPT="${OPT%%=*}"
	fi

	# Pop array.
	((_ARGV_INDEX++))

	# Handle hooks.
	local hook
	for hook in "${SHIFTOPT_HOOKS[@]}"; do
		if "$hook"; then
			shiftopt
			return $?
		fi
	done

	# Return.
	return 0
}

# Gets the value for the current option.
#
# Variables:
#     OPT_VAL  -- The option value.
#
# Returns:
#     0       -- An option value was read.
#     EXIT 1  -- No option value was available.
shiftval() {
	# Skip if a value was already provided.
	if [[ -n "${OPT_VAL+x}" ]]; then
		return 0
	fi

	OPT_VAL="${_ARGV[$_ARGV_INDEX]}"
	((_ARGV_INDEX++))

	# Error if no value is provided.
	if [[ "$OPT_VAL" =~ -.* ]]; then
		printc "%{RED}%s: '%s' requires a value%{CLEAR}\n" "$PROGRAM" "$ARG"
		exit 1
	fi
}


# -----------------------------------------------------------------------------
setargs "$@"

# --- END LIBRARY FILE ---
# --- BEGIN LIBRARY FILE: opt_hooks.sh ---
#!/usr/bin/env bash
# -----------------------------------------------------------------------------
# bat-extras | Copyright (C) 2019 eth-p | MIT License
#
# Repository: https://github.com/eth-p/bat-extras
# Issues:     https://github.com/eth-p/bat-extras/issues
# -----------------------------------------------------------------------------


# -----------------------------------------------------------------------------
# Hooks:
# -----------------------------------------------------------------------------

# Option parser hook: color support.
# This will accept --no-color, or --color.
# It will also try to accept --color=never|always|auto.
#
# The variable OPT_COLOR will be set depending on whether or not a TTY is
# detected and whether or not --color/--no-color is specified.
hook_color() {
	SHIFTOPT_HOOKS+=("__shiftopt_hook__color")
	__shiftopt_hook__color() {
		case "$OPT" in
			--no-color) OPT_COLOR=false; printc_init "$OPT_COLOR";;
			--color)    {
				case "$OPT_VAL" in
					auto)        :;;
					always|true) OPT_COLOR=true;  printc_init "$OPT_COLOR";;
					never|false) OPT_COLOR=false; printc_init "$OPT_COLOR";;
				esac
			};;

			*) return 1;;
		esac
	}

	# Default color support.
	if [[ -z "$OPT_COLOR" ]]; then
		if [[ -t 1 ]]; then
			OPT_COLOR=true
		else
			OPT_COLOR=false
		fi
		printc_init "$OPT_COLOR"
	fi
}

# Option parser hook: pager support.
# This will accept --pager='pager', --no-pager
hook_pager() {
	SHIFTOPT_HOOKS+=("__shiftopt_hook__pager")
	__shiftopt_hook__pager() {
		case "$OPT" in
	    	# Specify paging.
			--no-pager)   shiftval; SCRIPT_PAGER_CMD='';;
			--paging)     shiftval; {
				case "$OPT_VAL" in
					auto)   :;;
					never)  SCRIPT_PAGER_CMD='';;
					always) :;;
				esac
			};;

			# Specify the pager.
			--pager) {
				shiftval;
				SCRIPT_PAGER_CMD=($OPT_VAL);
				PAGER_ARGS=()
			};;

			*) return 1;;
		esac
	}
}

# --- END LIBRARY FILE ---
# --- BEGIN LIBRARY FILE: version.sh ---
#!/usr/bin/env bash
# -----------------------------------------------------------------------------
# bat-extras | Copyright (C) 2019 eth-p | MIT License
#
# Repository: https://github.com/eth-p/bat-extras
# Issues:     https://github.com/eth-p/bat-extras/issues
# -----------------------------------------------------------------------------

# Gets the current bat version.
bat_version() {
	"$BAT" --version | cut -d ' ' -f 2
	return
}

# Compares two version strings.
# Arguments:
#    1  -- The version to compare.
#    2  -- The comparison operator (same as []).
#    3  -- The version to compare with.
version_compare() {
	local version="$1"
	local compare="$3"

	if ! [[ "$version" =~ \.$ ]]; then
		version="${version}."
	fi

	if ! [[ "$compare" =~ \.$ ]]; then
		compare="${compare}."
	fi

	version_compare__recurse "$version" "$2" "$compare"
	return $?
}

version_compare__recurse() {
	local version="$1"
	local operator="$2"
	local compare="$3"

	# Extract the leading number.
	local v_major="${version%%.*}"
	local c_major="${compare%%.*}"

	# Extract the remaining numbers.
	local v_minor="${version#*.}"
	local c_minor="${compare#*.}"

	# Compare the versions specially if the final number has been reached.
	if [[ -z "$v_minor" && -z "$c_minor" ]]; then
		[ "$v_major" $operator "$c_major" ];
		return $?;
	fi

	# Insert zeroes where there are missing numbers.
	if [[ -z "$v_minor" ]]; then
		v_minor="0."
	fi

	if [[ -z "$c_minor" ]]; then
		c_minor="0."
	fi

	# Compare the versions.
	# This is an early escape case.
	case "$operator" in
		-eq)     [[ "$v_major" -ne "$c_major" ]] && return 1;;
		-ne)     [[ "$v_major" -ne "$c_major" ]] && return 0;;
		-ge|-gt) [[ "$v_major" -lt "$c_major" ]] && return 1;
		         [[ "$v_major" -gt "$c_major" ]] && return 0;;
		-le|-lt) [[ "$v_major" -gt "$c_major" ]] && return 1;
		         [[ "$v_major" -lt "$c_major" ]] && return 0;;
	esac

	version_compare__recurse "$v_minor" "$operator" "$c_minor"
}


# --- END LIBRARY FILE ---
# -----------------------------------------------------------------------------
# Init:
# -----------------------------------------------------------------------------
hook_color
hook_pager
# -----------------------------------------------------------------------------
# Options:
# -----------------------------------------------------------------------------
RG_ARGS=()
BAT_ARGS=()
PATTERN=""
FILES=()
OPT_CONTEXT_BEFORE=2
OPT_CONTEXT_AFTER=2
OPT_FOLLOW=true
OPT_SNIP=""
OPT_HIGHLIGHT=true
BAT_STYLE="header,numbers"

# Set options based on the bat version.
if version_compare "$(bat_version)" -gt "0.12"; then
	OPT_SNIP=",snip"
fi

# Parse arguments.
while shiftopt; do
	case "$OPT" in

		# Ripgrep Options
		-i|--ignore-case)              RG_ARGS+=("--ignore-case");;
		-A|--after-context)  shiftval; OPT_CONTEXT_AFTER="$OPT_VAL";;
		-B|--before-context) shiftval; OPT_CONTEXT_BEFORE="$OPT_VAL";;
		-C|--context)        shiftval; OPT_CONTEXT_BEFORE="$OPT_VAL";
			                           OPT_CONTEXT_AFTER="$OPT_VAL";;

		-F|--fixed-strings|\
		-U|--multiline|\
		-P|--pcre2|\
		-z|--search-zip|\
		-w|--word-regexp|\
		--one-file-system|\
		--multiline-dotall|\
		--ignore|--no-ignore|\
		--crlf|--no-crlf|\
		--hidden|--no-hidden)          RG_ARGS+=("$OPT");;

		-E|--encoding|\
		-g|--glob|\
		-t|--type|\
		-T|--type-not|\
		-m|--max-count|\
		--max-depth|\
		--iglob|\
		--ignore-file)       shiftval; RG_ARGS+=("$OPT" "$OPT_VAL");;

		# Bat Options

		# Script Options
		--no-follow)                   OPT_FOLLOW=false;;
		--no-snip)                     OPT_SNIP="";;
		--no-highlight)                OPT_HIGHLIGHT=false;;

		# ???
		-*) {
			printc "%{RED}%s: unknown option '%s'%{CLEAR}\n" "$PROGRAM" "$OPT" 1>&2
			exit 1
		};;

		# Search
		*) {
			if [ -z "$PATTERN" ]; then
				PATTERN="$OPT"
			else
				FILES+=("$OPT")
			fi
		};;		
	esac
done

if [[ -z "$PATTERN" ]]; then
	print_error "no pattern provided"
	exit 1
fi

# Generate separator.
SEP="$(printc "%{DIM}%$(tput cols)s%{CLEAR}" | sed "s/ /─/g")"

# Append ripgrep and bat arguments.
if "$OPT_FOLLOW"; then
	RG_ARGS+=("--follow")	
fi

if "$OPT_COLOR"; then
	BAT_ARGS+=("--color=always")
else
	BAT_ARGS+=("--color=never")
fi

if [[ "$OPT_CONTEXT_BEFORE" -eq 0 && "$OPT_CONTEXT_AFTER" -eq 0 ]]; then
	OPT_SNIP=""
	OPT_HIGHLIGHT=false
fi

# -----------------------------------------------------------------------------
# Main:
# -----------------------------------------------------------------------------
main() {
	FOUND_FILES=()
	FOUND=0
	FIRST_PRINT=true
	LAST_LR=()
	LAST_LH=()
	LAST_FILE=''

	do_print() {
		[[ -z "$LAST_FILE" ]] && return 0

		# Print the separator.
		"$FIRST_PRINT" && echo "$SEP"
		FIRST_PRINT=false

		# Print the file.
		"$BAT" "${BAT_ARGS[@]}" \
			   "${LAST_LR[@]}" \
			   "${LAST_LH[@]}" \
			   --style="${BAT_STYLE}${OPT_SNIP}" \
			   --paging=never \
			   "$LAST_FILE"

		# Print the separator.
		echo "$SEP"
	}

	while IFS=':' read -r file line column; do
		((FOUND++))

		if [[ "$LAST_FILE" != "$file" ]]; then
			do_print
			LAST_FILE="$file"
			LAST_LR=()
			LAST_LH=()
		fi
		
		# Calculate the context line numbers.
		line_start=$((line - OPT_CONTEXT_BEFORE))
		line_end=$((line + OPT_CONTEXT_AFTER))
		[[ "$line_start" -gt 0 ]] || line_start=''

		LAST_LR+=("--line-range=${line_start}:${line_end}")
		[[ "$OPT_HIGHLIGHT" = "true" ]] && LAST_LH+=("--highlight-line=${line}")
	done < <(rg --with-filename --vimgrep "${RG_ARGS[@]}" --sort path "$PATTERN" "${FILES[@]}")
	do_print

	# Exit.
	if [[ "$FOUND" -eq 0 ]]; then
		exit 2
	fi
}

pager_exec main
exit $?

