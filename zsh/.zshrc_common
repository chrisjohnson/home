PATH="$HOME/bin:$HOME/.home/bin:$HOME/.home/bin/git:$PATH"

# Source z
if [[ -s "/usr/local/etc/profile.d/z.sh" ]]; then
	. /usr/local/etc/profile.d/z.sh
fi

# Source fzf
[ -f $HOME/.home/zsh/.fzf.zsh ] && source $HOME/.home/zsh/.fzf.zsh

# Source kubectl
type kubectl &>/dev/null && source <(kubectl completion zsh)

# Source fubectl
[ -f $HOME/.home/zsh/fubectl/fubectl.source ] && source $HOME/.home/zsh/fubectl/fubectl.source

# Source tmuxinator
source $HOME/.home/zsh/tmuxinator/completion/tmuxinator.zsh

# Enable sourcing bash completions
autoload bashcompinit
bashcompinit

# Note: git's git-completion.zsh file conflicts with zsh's _git file, you may have to rm/mv `/usr/local/share/zsh/site-functions/_git -> ../../../Cellar/git/2.14.1/share/zsh/site-functions/_git`
# TODO: Maybe brew install order matters here?
source "$HOME/.home/bin/git/.zcompletion"

# Mac-only things
if [ -x /opt/homebrew/bin/brew ]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
fi

if type brew &>/dev/null; then

  # Source asdf
  [ -f $(brew --prefix asdf)/libexec/asdf.sh ] && source $(brew --prefix asdf)/libexec/asdf.sh ; [ -f $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash ] && source $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash

  # Source kubeswitch
  if brew --prefix switch 2>/dev/null; then
    [ -f $(brew --prefix switch)/switch.sh ] && source $(brew --prefix switch)/switch.sh
    [ -f $(brew --prefix switch)/switch.sh ] && source $HOME/.home/zsh/kubeswitch/_switch.bash
  fi

  # Source kube-ps1
  [ -f $(brew --prefix kube-ps1)/share/kube-ps1.sh ] && source $(brew --prefix kube-ps1)/share/kube-ps1.sh
  #[ -f $(brew --prefix kube-ps1)/share/kube-ps1.sh ] && PROMPT="${PROMPT}--$(kube_ps1)"

  # Add anaconda (conda) to PATH (two different potential locations)
  export PATH=/usr/local/anaconda3/bin:$PATH
  export PATH="/opt/homebrew/anaconda3/bin:$PATH"
fi

# C-b to erase current prompt, run a command, then return the current prompt as it was
bindkey '^B' push-line

# Settings
EDITOR="vim"
PAGER="less"
VISUAL="vim"

# Aliases
alias rsync.exact="rsync -rtpogxv -P -l -H"
alias rsync.loose="rsync -zvru -P"
alias rgrep="grep -r"
alias vimconflicts='vim -p +/"<<<<<<<" $( git diff --name-only --diff-filter=U | uniq | xargs )'
alias -g g="| grep"
alias -g l="| less"
alias df="pydf 2>/dev/null || df -h"
alias tf="terraform"
alias k="kubectl"
alias mux="tmuxinator"
alias kubectx="switch"

function rsync-gopro-uncombined-to-scratch() {
	source1="/Volumes/GoPro/DCIM/100GOPRO"
	source2="/Volumes/GoPro/DCIM/101GOPRO"
	source3="/Volumes/GoPro/DCIM/102GOPRO"
	dest="/Volumes/T9/Scratch/gopro-uncombined"

	if [ ! -z "$( ls -A $dest )" ]; then
		echo "Target ${dest} is not empty"
		return 1
	fi

	rsync_args="-zvrtP"
	echo :: /usr/bin/rsync "${rsync_args}" "${source1}/*JPG" "${source1}/*MP4" "${source2}/*JPG" "${source2}/*MP4" "${source3}/*JPG" "${source3}/*MP4" "$dest"

	# (N) tells zsh to remove the arg if the glob matches nothing
	/usr/bin/rsync "${rsync_args}" "$source1"/*JPG(N) "$source1"/*MP4(N) "$source2"/*JPG(N) "$source2"/*MP4(N) "$source3"/*JPG(N) "$source3"/*MP4(N) "$dest"
}

function ffmpeg-combine-timelapse() {
	FFMPEG_CONCAT_DIR=${FFMPEG_CONCAT_DIR:-/Volumes/T9/Scratch/gopro-uncombined}
	FFMPEG_CONCAT_TARGET=${FFMPEG_CONCAT_TARGET:-/Volumes/T9/Scratch/gopro-combined}
	FFMPEG_IGNORE_NONEMPTY_TARGET=${FFMPEG_IGNORE_NONEMPTY_TARGET:-false}

	if [ ! -z "$( ls -A $FFMPEG_CONCAT_TARGET )" ] && [[ "${FFMPEG_IGNORE_NONEMPTY_TARGET}" == "false" ]]; then
		echo "Target ${FFMPEG_CONCAT_TARGET} is not empty"
		return 1
	fi

	noglob ffmpeg -framerate 30 -pattern_type glob -i "${FFMPEG_CONCAT_DIR}/G001*.JPG" -c:v libx264 -r 30 "${FFMPEG_CONCAT_TARGET}/G001XXX.mp4"
}

function ffmpeg-combine-gopro-scratch() {
	FFMPEG_CONCAT_DIR=${FFMPEG_CONCAT_DIR:-/Volumes/T9/Scratch/gopro-uncombined}
	FFMPEG_CONCAT_TARGET=${FFMPEG_CONCAT_TARGET:-/Volumes/T9/Scratch/gopro-combined}
	FFMPEG_IGNORE_NONEMPTY_TARGET=${FFMPEG_IGNORE_NONEMPTY_TARGET:-false}

	if [ ! -z "$( ls -A $FFMPEG_CONCAT_TARGET )" ] && [[ "${FFMPEG_IGNORE_NONEMPTY_TARGET}" == "false" ]]; then
		echo "Target ${FFMPEG_CONCAT_TARGET} is not empty"
		return 1
	fi

	cd $FFMPEG_CONCAT_DIR
	VIDEOS=("${(@f)$(ls *MP4 | awk '{ print substr($0,5,4) }' | sort -u)}")
	COPY_ALL="n"
	for video ("$VIDEOS[@]"); do
		echo
		echo "Found ${FFMPEG_CONCAT_DIR}/GH0X${video}.MP4"
		echo
		if [[ "$COPY_ALL" != "y" ]]; then
			read -k1 "tmp?Copy? [n/y/a/q] "
			if [[ "$tmp" == "a" ]]; then
				COPY_ALL="y"
			elif [[ "$tmp" == "q" ]]; then
				break
			elif [[ "$tmp" == "n" ]]; then
				continue
			fi
		fi

		echo
		echo

		# Define pattern for this video set
		PATTERN="GH*${video}.MP4"
		ffmpeg -f concat -safe 0 -i <(for f in $FFMPEG_CONCAT_DIR/$~PATTERN; do echo "file '$f'"; done) -map 0 -c:v copy -c:a copy -c:d copy -c:s copy -ignore_unknown "${FFMPEG_CONCAT_TARGET}/GH0X${video}.mp4"

		# Find the list of matches and capture the first one
		X=($FFMPEG_CONCAT_DIR/$~PATTERN)
		FIRST_VIDEO="${X[1]}"
		# Use its mtime as the mtime on the produced file
		touch -m -r "$FIRST_VIDEO" "${FFMPEG_CONCAT_TARGET}/GH0X${video}.mp4"

		echo
		echo
		echo "Done"
		echo
		echo
		echo
	done
}

function rsync-mavic-3-pro-to-nas() {
	RSYNC_SOURCE="/Volumes/Mavic 3 Pro/DCIM/DJI_001" rsync-to-nas
}

function rsync-gopro-combined-to-nas() {
	RSYNC_SOURCE="/Volumes/T9/Scratch/gopro-combined" rsync-to-nas
}

function rsync-to-nas() {
	FORCE=${FORCE:-false}

	if [[ "$RSYNC_SOURCE" == "" ]]; then
		echo "Missing RSYNC_SOURCE"
		return 1
	fi

	if [ ! -d "$RSYNC_SOURCE/" ]; then
		echo "${RSYNC_SOURCE} not mounted"
		return 1
	fi

	date_dest=$(date '+%Y/%m')
	dest_host="dmsuperman@nas.local"
	dest_path="/volume1/homes/dmsuperman/Photos/PhotoLibrary/${date_dest}/"
	dest="${dest_host}:${dest_path}"

	echo :: ssh "${dest_host}" mkdir -p "${dest_path}"

	ssh "${dest_host}" mkdir -p "${dest_path}"

	[[ "$FORCE" == "true" ]] && rsync_args="-zvrutP" || rsync_args="-zvrtP"

	echo :: /usr/bin/rsync "${rsync_args}" "${RSYNC_SOURCE}/*JPG" "${RSYNC_SOURCE}/*MP4" "$dest"

	# (N) tells zsh to remove the arg if the glob matches nothing
	/usr/bin/rsync "${rsync_args}" "$RSYNC_SOURCE"/*JPG(N) "$RSYNC_SOURCE"/*MP4(N) "$dest"
}

mvln(){
	# Get an absolute path for the target
	tp="`dirname $2`/`basename $2`/"
	tp="$tp:A"

	# If the target doesn't include a new filename, use the same filename as the source
	if [ -d "$2" ]; then
		t="$tp/`basename $1`"
	else
		t="$tp"
	fi

	# Full path to source, even if it was specified as relative
	s="$1:A"

	mv "$s" "$t" && ln -s "$t" "$s"
}

lens() {
	if [ ! -d $HOME/.kube-lens ]; then
		mkdir $HOME/.kube-lens
		wget -O $HOME/.kube-lens/index.html https://raw.githubusercontent.com/mac2000/notlens/main/index.html
	fi

	if ! pgrep -f 'kubectl proxy' >/dev/null; then
		kubectl proxy --www=$HOME/.kube-lens/ --www-prefix=/lens/ &
		proxy_pid=$!
		sleep 1
		trap "kill -9 ${proxy_pid}" EXIT
		trap "kill -9 ${proxy_pid}" SIGINT
	fi

	open http://localhost:8001/lens/index.html

	if [ "$proxy_pid" != "" ]; then
		wait $proxy_pid
	fi
}



# Load any local zshrc overrides
if [ -s ~/.zshrc_local ]; then
	. ~/.zshrc_local
fi
