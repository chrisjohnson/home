flac-to-mp3(){
	QUALITY="$1"
	TOTALTRACKS="`ls *flac | wc -l`"
	echo "Found $TOTALTRACKS files to convert"
	for f in *.flac; do
		OUT=$(echo "$f" | sed s/\.flac$/.mp3/g)
		ARTIST=$(metaflac "$f" --show-tag=ARTIST | sed "s/.*=//g")
		TITLE=$(metaflac "$f" --show-tag=TITLE | sed "s/.*=//g")
		ALBUM=$(metaflac "$f" --show-tag=ALBUM | sed "s/.*=//g")
		GENRE=$(metaflac "$f" --show-tag=GENRE | sed "s/.*=//g")
		TRACK=$(metaflac "$f" --show-tag=TRACKNUMBER | sed "s/.*=//g")
		DATE=$(metaflac "$f" --show-tag=DATE | sed "s/.*=//g")
		echo "Converting $f to $OUT"
		flac -c -d "$f" | lame -mj -q0 -s44.1 $QUALITY - "$OUT"
		echo "Tagging $OUT with id3v1 and then id3v2"
		id3 -t "$TITLE" -T "$TRACK" -A "$ALBUM" -y "$DATE" -g "$GENRE" "$OUT"
		id3v2 -t "$TITLE" -T "${TRACK:-0}" -a "$ARTIST" -A "$ALBUM" -y "$DATE" -g "${GENRE:-12}" "$OUT"
		echo "Updating the tags for $OUT with a more modern track and genre (id3v2.4)"
		mid3v2 -T "${TRACK:-0}/$TOTALTRACKS" -g "$GENRE" "$OUT" # Add the genre and track in a more modern fashion
	done
}
flac-to-v0(){
	flac-to-mp3 "-V0"
}
flac-to-v2(){
	flac-to-mp3 "-V2"
}
bitrates(){
	# Retreive the bitrate of files passed as arguments and print them out
	for file in $*
		do
		echo "`basename \"$file\"` - `bitrate \"$file\"`"
	done
}
bitrate(){
	# Print the bitrate of the file given as an argument
	echo $1 | read file
	exiftool -AudioBitrate "$file" | sed -r 's/^.*:\s([0-9]+)/\1/' | read audiobitrate
	if [[ $audiobitrate -gt 1000 ]]; then
		echo "$(( audiobitrate / 1000 ))k"
	fi
}
bpm(){
	infile=$1
	echo $infile | sed -n 's/^.*\.\(wav\)$/\1/p' | read WAV
	if [[ "$WAV" == "" ]]; then
		ffmpeg -y -i $infile -f wav /tmp/buffer.wav 2>/dev/null >/dev/null
		infile="/tmp/buffer.wav"
	fi
	soundstretch $infile -bpm | sed -n 's/Detected BPM rate \(.*\)/\1 BPM/p'
}
id3-read-tag(){
	# Given a filename, hash it and read the id3 tags from the hash table using the md5 hash of the file as key
	# If the file hasn't already been scanned, read it into the hash table
	HASHNAME=`echo $1 | md5sum | awk '{print $1}'`
	typeset -gA "ID3_FILE_DB"
	if [[ "$ID3_FILE_DB[$HASHNAME]" == "" ]]; then
		id3-read-file "$HASHNAME" "$1"
	fi
	case ${2:l} in
		tit2|title) field="TIT2";;
		tpe1|artist) field="TPE1";;
		talb|album) field="TALB";;
		trck|track) field="TRCK";;
		tyer|year) field="TYER";;
		tcon|genre) field="TCON";;
		*) field="";;
	esac
	echo $ID3_FILE_DB[$HASHNAME] | grep -a "^${field}" 2>/dev/null | sed "s/^${field}=//"
}
id3-read-file(){
	# Read the tags for a given file and store the results in a searchable array
	typeset -gA "ID3_FILE_DB"
	ID3_FILE_DB[$1]=`mid3v2 $2`
}
id3-rename-files(){
	if [[ ! -t 0 ]]; then
		cat | read format
	else
		format=""
	fi
	for file in $*
		do echo "$format" | id3-rename-file $file
	done
}
id3-rename-file(){
	# Given a filename, read all the relevant information from the hash table and rename it appropriately
	typeset -gA "ID3_FILE_DB"
	filename=$1
	basedir=`dirname $1`
	if [[ ! -t 0 ]]; then
		cat | read format
	else
		format=""
	fi
	title=`id3-read-tag $filename title | sed "s/\//-/g"`
	album=`id3-read-tag $filename album`
	artist=`id3-read-tag $filename artist`
	track=`id3-read-tag $filename track | sed "s/\/.*//g"`
	track=`track-clean $track`
	year=`id3-read-tag $filename year`
	if [[ "$format" == "" ]]; then
		if [[ "$track" == "00" ]]; then
			newfilename="$basedir/$artist - $title.mp3"
		else
			newfilename="$basedir/$track.$title.mp3"
		fi
	else
		if [[ "$format" == "title" ]]; then
			newfilename="$basedir/$track.$title - $artist.mp3"
		else
			newfilename="$basedir/$track.$artist - $title.mp3"
		fi
	fi
	if [[ "$filename" != "$newfilename" ]]; then
		echo "Moving \"$filename\" to \"$newfilename\""
		mv "$filename" "$newfilename"
	fi
}
id3-clean-tags(){
	filename=$1
	title=`id3-read-tag "$filename" title`
	title-clean $title | read newtitle
	artist=`id3-read-tag "$filename" artist`
	title-clean $artist | read newartist
	album=`id3-read-tag "$filename" album`
	title-clean $album | read newalbum
	echo "Title: $title => $newtitle"
	echo "Album: $album => $newalbum"
	echo "Artist: $artist => $newartist"
	mid3v2 -a "$newartist" -A "$newalbum" -t "$newtitle" --TPOS "1/1" "$filename"
}
id3-clean-dir(){
	if [[ "$1" == "" ]]; then
		dir=`pwd`
	else
		dir="$1"
		if [[ "$2" == "track" ]]; then
			albumtrack=1
		else
			albumtrack=0
		fi
	fi
	if [[ ! -t 0 ]]; then
		cat | read format
	else
		format=""
	fi
	find $dir -type f -iname "*mp3" | wc -l | read ALBUMCOUNT
	find $dir -type f -iname "*mp3" | while read FILE; do
		echo "Found $FILE"
		echo "$format" | id3-clean-file "$FILE" "$albumtrack" "$ALBUMCOUNT"
		echo "==============="
	done
	echo "Done!"
}
id3-clean-files(){
	if [[ ! -t 0 ]]; then
		cat | read format
	else
		format=""
	fi
	for file in $*
		do echo "$format" | id3-clean-file $file
	done
}
id3-clean-file(){
	if [[ ! -t 0 ]]; then
		cat | read format
	else
		format=""
	fi
	FILE="$1"
	ALBUMTRACK="$2"
	ALBUMCOUNT="$3"
	id3-clean-tags "$FILE"
	if [[ "$ALBUMTRACK" == "1" ]]; then
		echo "Fixing track"
		id3-fix-track "$FILE" "$ALBUMCOUNT"
	fi
	echo "$format" | id3-rename-file "$FILE"
}
id3-fix-track(){
	echo $1 | read FILE
	echo $2 | read ALBUMCOUNT
	track-clean $ALBUMCOUNT | read ALBUMCOUNT
	id3-read-tag $FILE track | read TRACK
	track-clean $TRACK | read NEWTRACK
	NEWTRACK="$NEWTRACK/$ALBUMCOUNT"
	mid3v2 -T "$NEWTRACK" "$FILE"
}
id3-scan-tags(){
	cat | while read file; do
		track=$(echo $file | sed -E 's/^([0-9]+)\..*$/\1/')
		if [[ ! $track == "" ]]; then
			id3 -T "$track" "$file"
		fi
	done
}
title-clean(){
	echo $1 | sed 's/\sof\s/ of /gi' | sed 's/(?![-\(\)&])\sthe\s/ the /gi' | sed 's/\sand\s/ and /gi' | sed 's/(?![-\(\)&])\sa\s/ a /gi' | sed 's/\s(original\smix)//i'
}
track-clean(){
	printf '%02d' "`echo $1 | sed 's/\/.*$//g'`"
}

alias id3="mid3v2"
